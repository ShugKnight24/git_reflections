How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It was pretty easy to compare the different versions of code using diff.
    The color coding made it really easy to notice the 'spacr' typo.

    It is also pretty nifty to be able to compare files without a version control system.
    I did not know that was possible.
    I don't know how practical this is, as you'd have to manually save the different versions under different names,
    but I could see how it would be a useful command to run.

    I can also see how `git diff` would be extremely beneficial command during the development process.
    If you had a working version of a game, site, system, etc...
    you could compare to that version if you ever had a bug.

    I don't typically use `git diff`, but this course made me want to incorporate it into my workflow.
    I will try to be more mindful about using it.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    This can become critical if you want to see why you did something a certain way,
    or to check why a certain feature may have a functionality breaking bug when it was operational before.

    I can also see how it can be extremely useful working on a large team and
    you wanting to see who made which particular changes.

    This would allow you to track the work that others are doing and ensure you don't recreate work.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    A pro would definitely that you can capture snapshots that make logical sense to you.

    A con of this thinking would be the opposite.
    What logically makes sense to you may not make sense to one of your coworkers.

    I did like the "one commit per logical change" recommendation that was made.
    I often feel like my own commits can be too large or too small.
    I will have to be more mindful of this when coding and committing my work.

    Another con would be that you have to remember to manually save every time you finish a particular task.
    Once you make Git a part of your workflow, this doesn't become difficult though.
    It really becomes second nature.

    A pro would be that you are more likely to save when you have a functioning version.
    Unless you intentionally wanted to save an uncompleted feature / work for one of your
    peers to look at.

    This would also allow you to play with more experimental work and revert to an older
    commit if you didn't particularly like what you had up to that point.

    With autosaving, you may have a lot of saves that don't make too much sense on their own.
    You often need a bigger picture to provide context.
    Autosaving is a great feature, but when you want logical commits with Git, it doesn't quite
    make as much sense to autosave your work.

    A con of manual saving is that it is up to the individual programmer to commit.
    They can be forgetful, or wait a long time before committing work.
    I've seen some horror stories, like https://www.hackread.com/developer-deletes-work-files-with-visual-studio-code/.
    Manual commits can change the consistency of commits to be done differently from dev to dev
    or in different work environments.
    It would be up to the team to create a system that works best for their scenario.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    In terms of Git, I believe it allows you save multiple files in one commit
    because there are often scenarios when you make some changes across a number
    of different files to accommodate a specific change.

    If I add my index.html and style.css, that would display that those files are connected.
    At a later point, I may add a link or some sort of element to the html,
    and I would have to style it in the css so it would make a lot of sense to have them connected.

    In regards to Google Docs, it makes sense to treat files independently.
    Each file is typically self-contained and does not affect outside documents.

    For example, Whenever I have used Google Docs, the work pertained to strictly that specific document
    without referring to anything else.

    However, I could definitely be mistaken about this as I don't use Google Docs all too frequently.

How can you use the commands git log and git diff to view the history of files?

    These are two git commands that I don't use nearly enough.
    I found them to prove really useful, and the more I've been relearning about git,
    the more I want to integrate both of these commands into my toolbox.

	I will make a concerted effort to get into the habit of using both of these commands regularly.
    Also, if you don't have access to the internet to look at the GitHub repo online,
    you can make use of those two commands to look through your commit history.

How might using version control make you more confident to make changes that
could break something?

    You can always feel safe knowing that you can revert to a prior state before a particular error ever occurred.
    You may be able to break something, but you can checkout a prior commit where the feature was working
    and compare using git diff to figure out what may have led to the bug occurring the first place.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to start taking more risks when I program.
    Ideally, as I get better, I hope to be able to push myself to try bigger changes.
    I would also feel more comfortable knowing that I have a safety net when I potentially introduce a bug that breaks my code.
